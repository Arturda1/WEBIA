import os
from dotenv import load_dotenv
load_dotenv()

import zipfile
import io
from flask import send_file


from flask import Flask, render_template, request, redirect, session, url_for
import os
import pandas as pd

app = Flask(__name__, template_folder="templates")
app.secret_key = "–æ—á–µ–Ω—å_—Å–µ–∫—Ä–µ—Ç–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞"


@app.route("/", methods=["GET", "POST"])
@app.route("/login", methods=["GET", "POST"])
def login():
    import json
    import os
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    users_path = os.path.join(BASE_DIR, "data", "users.json")

    if request.method == "POST":
        login_input = request.form["username"]
        password_input = request.form["password"]

        try:
            with open(users_path, "r", encoding="utf-8") as f:
                users = json.load(f)
        except Exception as e:
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: " + str(e)

        for u in users:
            if u["login"] == login_input and u["password"] == password_input:
                session["user"] = login_input
                session["employee"] = u["name"]
                return redirect(url_for("dashboard"))

        return render_template("login.html", error="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    return render_template("login.html")


# --- Login page ---
@app.route("/", methods=["GET", "POST"])
def login():
    import json
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    users_path = os.path.join(BASE_DIR, "data", "users.json")

    print("–ó–∞—à–ª–∏ –Ω–∞ /")

    if request.method == "POST":
        login_input = request.form["username"]
        password_input = request.form["password"]

        try:
            with open(users_path, "r", encoding="utf-8") as f:
                users = json.load(f)
        except Exception as e:
            return f"<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}</p>"

        for u in users:
            if u["login"] == login_input and u["password"] == password_input:
                session["user"] = login_input
                session["employee"] = u["name"]
                return redirect(url_for("dashboard"))

        return render_template("login.html", error="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    return render_template("login.html")






# --- Dashboard ---
@app.route("/dashboard")
def dashboard():
    if "user" not in session:
        return redirect(url_for("login"))
    return render_template("dashboard.html", user=session["user"])

@app.route("/view-stock", methods=["GET", "POST"])
def view_stock():
    if "user" not in session:
        return redirect(url_for("login"))

    from logic.materials_logic import load_materials, save_materials
    import pandas as pd

    df = load_materials()

    if request.method == "POST":
        diffs = []
        for i in range(len(df)):
            val = request.form.get(f"m_{i}", "").strip()
            try:
                diffs.append(float(val))
            except:
                diffs.append(0)

        for i in range(len(df)):
            df.at[i, "–û—Å—Ç–∞—Ç–æ–∫"] += diffs[i]

        save_materials(df)
        return "<p>‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.</p><a href='/view-stock'>‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è</a> | <a href='/dashboard'>üè† –í –º–µ–Ω—é</a>"

    html = "<h2>üì¶ –û—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ + –ò–∑–º–µ–Ω–µ–Ω–∏—è</h2>"
    html += "<form method='post'><table border='1' cellpadding='5'>"
    html += "<tr><th>‚Ññ</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ï–¥.</th><th>–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫</th><th>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</th></tr>"

    for i, row in df.iterrows():
        html += f"<tr><td>{i+1}</td><td>{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}</td><td>{row['–ï–¥. –∏–∑–º.']}</td>"
        html += f"<td>{row['–û—Å—Ç–∞—Ç–æ–∫']}</td><td><input type='text' name='m_{i}'></td></tr>"

    html += "</table><br><button type='submit'>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button></form>"
    html += "<br><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"
    return html


@app.route("/produce", methods=["GET", "POST"])
def produce_route():
    if "user" not in session:
        return redirect(url_for("login"))

    from logic.products_logic import produce
    import pandas as pd

    if request.method == "POST":
        product_name = request.form.get("product")
        qty = int(request.form.get("qty", 1))
        try:
            produce(product_name, qty)
            return f"<p>‚úÖ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ {qty} √ó {product_name}</p><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"
        except Exception as e:
            return f"<p>‚ùå –û—à–∏–±–∫–∞: {e}</p><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–¥–µ–ª–∏–π –∏–∑ Excel
    df = pd.read_excel("data/product_recipes.xlsx")
    product_names = df["–ù–∞–∑–≤–∞–Ω–∏–µ"].unique().tolist()

    options_html = "".join([f"<option value='{name}'>{name}</option>" for name in product_names])

    return f'''
        <h2>üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</h2>
        <form method="post">
            <label>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ:</label><br>
            <select name="product">{options_html}</select><br><br>
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label><br>
            <input name="qty" type="number" value="1"><br><br>
            <button type="submit">–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏</button>
        </form>
        <a href="/dashboard">‚¨Ö –ù–∞–∑–∞–¥</a>
    '''


# --- Logout ---
@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))

@app.route("/view-products")
def view_products():
    if "user" not in session:
        return redirect(url_for("login"))

    from logic.products_logic import load_products

    df = load_products()

    html = "<h2>üì¶ –û—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</h2><ul>"

    for category in ["–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç"]:
        html += f"<h3>{category}</h3><ul>"
        sub = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category]
        for _, row in sub.iterrows():
            html += f"<li>{row['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {row['–û—Å—Ç–∞—Ç–æ–∫']} {row['–ï–¥. –∏–∑–º.']}</li>"
        html += "</ul>"

    html += "<a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"
    return html

@app.route("/register-operation", methods=["GET", "POST"])
def register_operation_web():
    if "user" not in session:
        return redirect(url_for("login"))

    from logic.salary_logic import register_operation, load_rates
    import json

    # üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ POST (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏)
    if request.method == "POST":
        employee = request.form.get("employee")
        operation = request.form.get("operation")
        qty = int(request.form.get("qty", 1))

        print(f"üì• POST-–ø–æ–ª—É—á–µ–Ω–æ: {employee}, {operation}, {qty}")  # debug
        register_operation(employee, operation, qty)

        return redirect(url_for("dashboard"))

    # üîµ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    rates_df = load_rates()

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏: –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí [–û–ø–µ—Ä–∞—Ü–∏–∏]
    structured = {}
    for _, row in rates_df.iterrows():
        cat = row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        sub = row.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        name = row["–ù–∞–∑–≤–∞–Ω–∏–µ"]
        structured.setdefault(cat, {}).setdefault(sub, []).append(name)

    data_json = json.dumps(structured, ensure_ascii=False)

    return f"""
    <h2>üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏</h2>
    <form method="post">
        <label>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</label><br>
        <input type="hidden" name="employee" value="{session['employee']}">
        <p><b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {session['employee']}</p><br>


        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label><br>
        <select id="category" onchange="updateSubcategories()" required></select><br><br>

        <label>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</label><br>
        <select id="subcategory" onchange="updateOperations()" required></select><br><br>

        <label>–û–ø–µ—Ä–∞—Ü–∏—è:</label><br>
        <select name="operation" id="operation" required></select><br><br>

        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label><br>
        <input name="qty" type="number" value="1" required><br><br>

        <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
    </form>

    <a href="/dashboard">‚¨Ö –ù–∞–∑–∞–¥</a>

    <script>
    const data = {data_json};

    function updateSubcategories() {{
        const cat = document.getElementById("category").value;
        const subs = Object.keys(data[cat] || {{}});

        const subSelect = document.getElementById("subcategory");
        subSelect.innerHTML = subs.map(s => `<option value="${{s}}">${{s}}</option>`).join('');
        updateOperations();
    }}

    function updateOperations() {{
        const cat = document.getElementById("category").value;
        const sub = document.getElementById("subcategory").value;
        const ops = (data[cat] && data[cat][sub]) || [];

        const opSelect = document.getElementById("operation");
        opSelect.innerHTML = ops.map(o => `<option value="${{o}}">${{o}}</option>`).join('');
    }}

    window.onload = () => {{
        const catSelect = document.getElementById("category");
        catSelect.innerHTML = Object.keys(data).map(c => `<option value="${{c}}">${{c}}</option>`).join('');
        updateSubcategories();
    }};
    </script>
    """



@app.route("/operations-log")
def operations_log():
    if "user" not in session:
        return redirect(url_for("login"))

    if session.get("employee") != "–∞–¥–º–∏–Ω":
        return "<p>‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"


    import pandas as pd
    path = "logs/operations_log.xlsx"

    if not os.path.exists(path):
        return "<p>üì≠ –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç.</p><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"

    # --- –ß—Ç–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ ---
    start = request.args.get("start")
    end = request.args.get("end")
    df = pd.read_excel(path)
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce")

    if start and end:
        try:
            start_date = pd.to_datetime(start)
            end_date = pd.to_datetime(end)
            df = df[(df["–î–∞—Ç–∞"] >= start_date) & (df["–î–∞—Ç–∞"] <= end_date)]
        except:
            return "<p>‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞.</p><a href='/operations-log'>‚¨Ö –ù–∞–∑–∞–¥</a>"

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML ---
    html = '''
    <h2>üßæ –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
    <form method="get">
      <label>–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ:</label><br>
      —Å <input type="date" name="start" required> –ø–æ <input type="date" name="end" required>
      <button type="submit">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
    </form><br>
    <table border='1' cellpadding='5'><tr>
    '''
    for col in df.columns:
        html += f"<th>{col}</th>"
    html += "</tr>"

    for _, row in df.iterrows():
        html += "<tr>" + "".join([f"<td>{row[col]}</td>" for col in df.columns]) + "</tr>"

    html += "</table><br>"

    # --- –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ ---
    html += '''
    <a href="/download-operations-log">üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥ (Excel)</a><br><br>
    <form action="/clear-operations-log" method="post" onsubmit="return confirm('–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª?')">
      <label>–ü–∞—Ä–æ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:</label><br>
      <input type="password" name="password" required><br><br>
      <button type="submit">üóë –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π</button>
    </form>
    <br><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>
    '''

    return html


@app.route("/clear-operations-log", methods=["POST"])
def clear_operations_log():
    if "user" not in session:
        return redirect(url_for("login"))

    password = request.form.get("password")
    if password != "1488":
        return "<p>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</p><a href='/operations-log'>‚Ü© –ù–∞–∑–∞–¥</a>"

    import pandas as pd
    path = "logs/operations_log.xlsx"
    columns = ["–î–∞—Ç–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–ò–∑–¥–µ–ª–∏–µ", "–ö–æ–ª-–≤–æ", "–°—Ç–∞–≤–∫–∞", "–°—É–º–º–∞"]
    df = pd.DataFrame(columns=columns)
    df.to_excel(path, index=False)

    return "<p>üóë –ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω.</p><a href='/operations-log'>‚Ü© –ù–∞–∑–∞–¥</a>"


@app.route("/salary-report", methods=["GET", "POST"])
def salary_report():
    if "user" not in session:
        return redirect(url_for("login"))

    import pandas as pd
    from datetime import datetime, timedelta
    from dateutil.relativedelta import relativedelta

    path = "logs/operations_log.xlsx"
    current_employee = session.get("employee", "").strip()

    if not os.path.exists(path):
        return "<p>üì≠ –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</p><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"

    df = pd.read_excel(path)
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce")

    if request.method == "POST":
        employee = request.form.get("employee").strip()
        period_str = request.form.get("period", "")
        if not employee or "," not in period_str:
            return "<p>‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.</p><a href='/salary-report'>‚¨Ö –ù–∞–∑–∞–¥</a>"

        start_str, end_str = period_str.split(",")
        start_date = pd.to_datetime(start_str)
        end_date = pd.to_datetime(end_str)

        filtered = df[(df["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"] == employee) & (df["–î–∞—Ç–∞"] >= start_date) & (df["–î–∞—Ç–∞"] <= end_date)]

        if filtered.empty:
            return "<p>üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p><a href='/salary-report'>‚¨Ö –ù–∞–∑–∞–¥</a>"

        total = round(filtered["–°—É–º–º–∞"].sum(), 2)

        html = f"<h2>üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {employee}</h2>"
        html += f"<p>–ü–µ—Ä–∏–æ–¥: {start_str} ‚Äî {end_str}</p>"
        html += "<table border='1' cellpadding='5'><tr>"
        for col in filtered.columns:
            html += f"<th>{col}</th>"
        html += "</tr>"
        for _, row in filtered.iterrows():
            html += "<tr>" + "".join([f"<td>{row[col]}</td>" for col in filtered.columns]) + "</tr>"
        html += f"</table><br><h3>–ò—Ç–æ–≥–æ: {total} ‚ÇΩ</h3>"
        html += "<a href='/salary-report'>‚Ü© –ù–∞–∑–∞–¥</a> | <a href='/dashboard'>üè† –í –º–µ–Ω—é</a>"
        return html

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
    if current_employee == "–∞–¥–º–∏–Ω":
        employees = df["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"].dropna().unique().tolist()
        employee_select = "<label>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</label><br><select name='employee'>" + "".join(
            [f"<option value='{name}'>{name}</option>" for name in employees]
        ) + "</select><br><br>"
    else:
        employee_select = f"<input type='hidden' name='employee' value='{current_employee}'>"
        employee_select += f"<p><b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {current_employee}</p><br>"

    # --- –ü–µ—Ä–∏–æ–¥—ã ---
    periods = []
    min_date = df["–î–∞—Ç–∞"].min().replace(day=1)
    max_date = df["–î–∞—Ç–∞"].max()

    cur = min_date
    while cur <= max_date:
        mid = cur.replace(day=15)
        last = (cur + relativedelta(months=1)).replace(day=1) - timedelta(days=1)
        periods.append((cur, mid))
        periods.append((mid + timedelta(days=1), last))
        cur += relativedelta(months=1)

    period_options = ""
    for start, end in periods:
        label = f"{start.strftime('%d.%m')} ‚Äì {end.strftime('%d.%m.%Y')}"
        value = f"{start.date()},{end.date()}"
        period_options += f"<option value='{value}'>{label}</option>"

    return f'''
        <h2>üßÆ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</h2>
        <form method="post">
            {employee_select}
            <label>–ü–µ—Ä–∏–æ–¥:</label><br>
            <select name="period">{period_options}</select><br><br>
            <button type="submit">–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>
        </form>
        <a href="/dashboard">‚¨Ö –ù–∞–∑–∞–¥</a>
    '''



@app.route("/download-operations-log")
def download_operations_log():
    if "user" not in session:
        return redirect(url_for("login"))

    path = "logs/operations_log.xlsx"
    if not os.path.exists(path):
        return "<p>‚ùå –§–∞–π–ª operations_log.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.</p><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"

    from flask import send_file
    return send_file(path, as_attachment=True)

@app.route("/calculate-cost", methods=["GET", "POST"])
def calculate_cost_web():
    from logic.material_cost_calc import (
        load_all,
        trace_all_stages,
        collect_materials_for_stages,
        get_price,
    )

    product_df, semi_df, materials_df = load_all()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
    all_names = set(product_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.strip())
    used_as_component = set(product_df["–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç"].str.strip())
    used_in_semi = set(semi_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.strip())
    final_products = sorted(all_names - used_as_component - used_in_semi)

    if request.method == "POST":
        selected = request.form.get("product")
        if not selected:
            return "<p>‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –∏–∑–¥–µ–ª–∏–µ.</p><a href='/calculate-cost'>‚Ü© –ù–∞–∑–∞–¥</a>"

        stages = trace_all_stages(selected, product_df)
        materials = collect_materials_for_stages(stages, semi_df)

        html = f"<h2>üßæ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {selected}</h2>"
        html += "<table border='1' cellpadding='5'><tr><th>–ú–∞—Ç–µ—Ä–∏–∞–ª</th><th>–ö–æ–ª-–≤–æ</th><th>–¶–µ–Ω–∞</th><th>–°—É–º–º–∞</th></tr>"
        total = 0
        for name in sorted(materials):
            qty = round(materials[name], 4)
            price = round(get_price(materials_df, name), 2)
            cost = round(qty * price, 2)
            total += cost
            html += f"<tr><td>{name}</td><td>{qty}</td><td>{price} ‚ÇΩ</td><td>{cost} ‚ÇΩ</td></tr>"
        html += f"<tr><td colspan='3' align='right'><b>–ò–¢–û–ì–û</b></td><td><b>{round(total, 2)} ‚ÇΩ</b></td></tr>"
        html += "</table><br><a href='/dashboard'>‚¨Ö –í –º–µ–Ω—é</a>"
        return html

    options_html = "".join([f"<option value='{name}'>{name}</option>" for name in final_products])
    return f'''
        <h2>üì¶ –†–∞—Å—á—ë—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è)</h2>
        <form method="post">
            <label>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ:</label><br>
            <select name="product">{options_html}</select><br><br>
            <button type="submit">üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å</button>
        </form>
        <a href="/dashboard">‚¨Ö –ù–∞–∑–∞–¥</a>
    '''

@app.route("/labor-cost", methods=["GET", "POST"])
def labor_cost_web():
    if "user" not in session:
        return redirect(url_for("login"))

    if session.get("employee") != "–∞–¥–º–∏–Ω":
        return "<p>‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"

    from logic.material_cost_calc import trace_all_stages
    import pandas as pd

    product_df = pd.read_excel("data/product_recipes.xlsx")
    rates_df = pd.read_excel("data/operation_rates.xlsx").drop_duplicates(subset=["–ù–∞–∑–≤–∞–Ω–∏–µ"])

    all_names = set(product_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.strip())
    used_as_component = set(product_df["–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç"].str.strip())
    final_products = sorted(all_names - used_as_component)

    if request.method == "POST":
        selected = request.form.get("product")
        if not selected:
            return "<p>‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –∏–∑–¥–µ–ª–∏–µ.</p><a href='/labor-cost'>‚Ü© –ù–∞–∑–∞–¥</a>"

        stages = trace_all_stages(selected, product_df)

        html = f"<h2>üíº –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç: {selected}</h2>"
        html += "<table border='1' cellpadding='5'><tr><th>–û–ø–µ—Ä–∞—Ü–∏—è</th><th>–ö–æ–ª-–≤–æ</th><th>–°—Ç–∞–≤–∫–∞</th><th>–°—É–º–º–∞</th></tr>"
        total = 0

        for stage, qty in stages.items():
            row = rates_df[rates_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == stage]
            if row.empty:
                continue
            rate = float(row.iloc[0]["–°—Ç–∞–≤–∫–∞ (‚ÇΩ)"])
            cost = round(rate * qty, 2)
            total += cost
            html += f"<tr><td>{stage}</td><td>{qty:.2f}</td><td>{rate:.2f} ‚ÇΩ</td><td>{cost:.2f} ‚ÇΩ</td></tr>"

        html += f"<tr><td colspan='3' align='right'><b>–ò–¢–û–ì–û</b></td><td><b>{round(total, 2)} ‚ÇΩ</b></td></tr>"
        html += "</table><br><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>"
        return html

    options_html = "".join([f"<option value='{name}'>{name}</option>" for name in final_products])
    return f'''
        <h2>üìä –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—Ç–∞–º (—Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è)</h2>
        <form method="post">
            <label>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ:</label><br>
            <select name="product">{options_html}</select><br><br>
            <button type="submit">–ü–æ—Å—á–∏—Ç–∞—Ç—å</button>
        </form>
        <a href="/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>
    '''


@app.route("/add-purchase", methods=["GET", "POST"])
def add_purchase():
    if "user" not in session:
        return redirect(url_for("login"))

    path = "data/purchases.xlsx"
    if os.path.exists(path):
        df = pd.read_excel(path)
    else:
        df = pd.DataFrame(columns=[
            "–î–∞—Ç–∞", "–î–æ—Å—Ç–∞–≤–∫–∞ ID", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–ï–¥. –∏–∑–º.",
            "–ö–æ–ª-–≤–æ —É–ø–∞–∫–æ–≤–æ–∫", "–ö–æ–ª-–≤–æ –≤ —É–ø–∞–∫–æ–≤–∫–µ", "–¶–µ–Ω–∞ (–∑–∞ —É–ø–∞–∫–æ–≤–∫—É)",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å (–æ–±—â–∞—è)", "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤", "–í–∏–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤"
        ])

    contractors = sorted(df["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"].dropna().unique().tolist())
    materials = sorted(df["–ú–∞—Ç–µ—Ä–∏–∞–ª"].dropna().unique().tolist())

    # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    selected_contractor = ""
    payment_sources = []
    expense_categories = []
    expense_types = []

    if request.method == "POST":
        mode = request.form.get("mode", "")
        selected_contractor = request.form.get("contractor") or ""
        new_contractor = request.form.get("new_contractor", "").strip()
        selected_contractor = new_contractor or selected_contractor

        if mode != "save":
            filtered_df = df[df["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] == selected_contractor]
            materials = sorted(filtered_df["–ú–∞—Ç–µ—Ä–∏–∞–ª"].dropna().unique().tolist())
            payment_sources = sorted(filtered_df["–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã"].dropna().unique().tolist())
            expense_categories = sorted(filtered_df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"].dropna().unique().tolist())
            expense_types = sorted(filtered_df["–í–∏–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤"].dropna().unique().tolist())

            return render_template("add_purchase.html",
                contractors=contractors,
                materials=materials,
                selected_contractor=selected_contractor,
                payment_sources=payment_sources,
                expense_categories=expense_categories,
                expense_types=expense_types
            )

        try:
            from datetime import datetime
            date = datetime.strptime(request.form.get("date"), "%Y-%m-%d")
            contractor = new_contractor or request.form.get("contractor")
            delivery_cost = float(request.form.get("delivery") or 0)

            payment_source = request.form.get("payment_source", "").strip()
            expense_category = request.form.get("expense_category", "").strip()
            expense_type = request.form.get("expense_type", "").strip()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –î–æ—Å—Ç–∞–≤–∫–∞ ID
            existing_ids = df["–î–æ—Å—Ç–∞–≤–∫–∞ ID"].dropna().astype(str).tolist()
            last_number = max([int(x[1:]) for x in existing_ids if x.startswith("D") and x[1:].isdigit()] + [0])
            delivery_id = f"D{last_number+1:04d}"

            rows = []
            index = 0
            while True:
                if f"material_{index}" not in request.form and f"new_material_{index}" not in request.form:
                    break

                material = request.form.get(f"new_material_{index}") or request.form.get(f"material_{index}")
                unit = request.form.get(f"unit_{index}", "—à—Ç")
                qty_packs = float(request.form.get(f"qty_packs_{index}") or 0)
                units_per_pack = float(request.form.get(f"units_per_pack_{index}") or 1)
                price_per_pack = float(request.form.get(f"price_per_pack_{index}") or 0)
                total_cost = float(request.form.get(f"total_cost_{index}") or 0)
                comment = request.form.get(f"comment_{index}", "")

                row = {
                    "–î–∞—Ç–∞": date,
                    "–î–æ—Å—Ç–∞–≤–∫–∞ ID": delivery_id,
                    "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": contractor,
                    "–ú–∞—Ç–µ—Ä–∏–∞–ª": material,
                    "–ï–¥. –∏–∑–º.": unit,
                    "–ö–æ–ª-–≤–æ —É–ø–∞–∫–æ–≤–æ–∫": qty_packs,
                    "–ö–æ–ª-–≤–æ –≤ —É–ø–∞–∫–æ–≤–∫–µ": units_per_pack,
                    "–¶–µ–Ω–∞ (–∑–∞ —É–ø–∞–∫–æ–≤–∫—É)": price_per_pack,
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å (–æ–±—â–∞—è)": total_cost,
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏": "",
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
                    "–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã": payment_source,
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤": expense_category,
                    "–í–∏–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤": expense_type
                }
                rows.append(row)
                index += 1

            if delivery_cost and len(rows) > 0:
                rows[0]["–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"] = delivery_cost

            df = pd.concat([df, pd.DataFrame(rows)], ignore_index=True)
            df.to_excel(path, index=False)

            return "<p style='color:green'>‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.</p><a href='/add-purchase'>–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë</a> | <a href='/dashboard'>üè† –í –º–µ–Ω—é</a>"

        except Exception as e:
            return f"<p>‚ùå –û—à–∏–±–∫–∞: {e}</p><a href='/add-purchase'>‚Ü© –ù–∞–∑–∞–¥</a>"

    return render_template("add_purchase.html",
        contractors=contractors,
        materials=materials,
        selected_contractor=selected_contractor,
        payment_sources=[],
        expense_categories=[],
        expense_types=[]
    )

import os

import zipfile
from flask import send_file

@app.route("/download-all")
def download_all():
    zip_path = "data/all_data.zip"
    with zipfile.ZipFile(zip_path, "w") as zipf:
        for file in os.listdir("data"):
            full_path = os.path.join("data", file)
            if os.path.isfile(full_path):
                zipf.write(full_path, arcname=file)
    return send_file(zip_path, as_attachment=True)



# nothing else here ‚Äî gunicorn handles app startup


from flask import send_from_directory, render_template_string

@app.route("/files")
def list_files():
    files = os.listdir("data")
    return render_template_string('''
        <h2>üìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ /data</h2>
        <ul>
        {% for f in files %}
            <li><a href="/download/{{ f }}">{{ f }}</a></li>
        {% endfor %}
        </ul>
        <br><a href='/dashboard'>‚¨Ö –ù–∞–∑–∞–¥</a>
    ''', files=files)

@app.route("/download-all")
def download_all_files():
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
        for filename in os.listdir("data"):
            file_path = os.path.join("data", filename)
            if os.path.isfile(file_path):
                zip_file.write(file_path, arcname=filename)
    zip_buffer.seek(0)
    return send_file(
        zip_buffer,
        mimetype='application/zip',
        download_name='all_data.zip',
        as_attachment=True
    )


@app.route("/download/<path:filename>")
def download_file(filename):
    return send_from_directory("data", filename, as_attachment=True)


@app.route("/debug-users")
def debug_users():
    import os, json
    users_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "users.json")
    if not os.path.exists(users_path):
        return "<p>‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</p>"
    with open(users_path, "r", encoding="utf-8") as f:
        return f"<pre>{json.dumps(json.load(f), ensure_ascii=False, indent=2)}</pre>"
    
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)

