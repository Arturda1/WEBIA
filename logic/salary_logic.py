import pandas as pd
import os
from datetime import datetime
from logic.material_usage import use_materials_for_product
from logic.products_logic import add_product_stock

RATES_FILE = "data/operation_rates.xlsx"
LOG_FILE = "logs/operations_log.xlsx"

def load_rates():
    if not os.path.exists(RATES_FILE):
        print("‚ùå –§–∞–π–ª operation_rates.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame(columns=["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—Ç–∞–≤–∫–∞ (‚ÇΩ)"])
    return pd.read_excel(RATES_FILE)

def log_operation(date, employee, operation, product, qty, rate, total):
    columns = ["–î–∞—Ç–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–ò–∑–¥–µ–ª–∏–µ", "–ö–æ–ª-–≤–æ", "–°—Ç–∞–≤–∫–∞", "–°—É–º–º–∞"]
    new_row = pd.DataFrame([[date, employee, operation, product, qty, rate, total]], columns=columns)
    os.makedirs("logs", exist_ok=True)

    if os.path.exists(LOG_FILE):
        log_df = pd.read_excel(LOG_FILE)
        log_df = pd.concat([log_df, new_row], ignore_index=True)
    else:
        log_df = new_row

    log_df.to_excel(LOG_FILE, index=False)

def register_operation(employee, operation, qty):
    if qty <= 0:
        print("‚ö†Ô∏è –ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    rates = load_rates()
    rate_row = rates[rates["–ù–∞–∑–≤–∞–Ω–∏–µ"] == operation]

    if rate_row.empty:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ '{operation}'")
        return

    rate = rate_row.iloc[0]["–°—Ç–∞–≤–∫–∞ (‚ÇΩ)"]
    total = round(rate * qty, 2)
    date = datetime.now()  # ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ datetime, –Ω–µ —Å—Ç—Ä–æ–∫—É

    product = operation

    try:
        use_materials_for_product(product, qty)
        add_product_stock(product, qty)
    except ValueError as e:
        print(f"‚ö†Ô∏è {e}")
        return
    except Exception as e:
        print(f"üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        return

    log_operation(date, employee, operation, product, qty, rate, total)
    print(f"‚úÖ {employee} ‚Üí {operation} √ó {qty} ‚Üí {total} ‚ÇΩ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.")


def operation_input_menu():
    print("\\nüìã –í–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")

    employee = input("–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ").strip()
    if not employee:
        print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return

    rates = load_rates()
    if rates.empty:
        print("‚ùå –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç.")
        return

    operations = rates["–ù–∞–∑–≤–∞–Ω–∏–µ"].tolist()

    while True:
        print("\\nüîÅ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (–∏–ª–∏ '0' ‚Äî –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é):")
        for idx, op in enumerate(operations, 1):
            print(f"  {idx}. {op}")

        choice = input("–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: ").strip()
        if choice == "0":
            print("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            break

        if not choice.isdigit() or not (1 <= int(choice) <= len(operations)):
            print(f"‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(operations)}.")
            continue

        operation = operations[int(choice) - 1]

        qty_input = input("–ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–∏–ª–∏ 0 ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å): ").strip()
        if qty_input == "0":
            print("‚è© –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            continue
        try:
            qty = int(qty_input)
        except ValueError:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            continue

        register_operation(employee, operation, qty)

