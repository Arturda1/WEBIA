import pandas as pd
import os
from logic.material_usage import use_materials_for_product

PRODUCTS_FILE = "data/products_list.xlsx"
RECIPES_FILE = "data/product_recipes.xlsx"

def load_products():
    if not os.path.exists(PRODUCTS_FILE):
        print("\n‚ùóÔ∏è–§–∞–π–ª products_list.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return pd.DataFrame(columns=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ï–¥. –∏–∑–º.", "–û—Å—Ç–∞—Ç–æ–∫"])
    return pd.read_excel(PRODUCTS_FILE)

def save_products(df):
    df.to_excel(PRODUCTS_FILE, index=False)

def load_recipes():
    return pd.read_excel(RECIPES_FILE)

def produce():
    df_products = load_products()
    df_recipes = load_recipes()

    while True:
        print("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏:")
        print("1. –ì–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ")
        print("2. –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç")
        print("–º. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        type_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()

        if type_choice == "–º":
            return
        elif type_choice == "1":
            products = df_products[df_products["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"]["–ù–∞–∑–≤–∞–Ω–∏–µ"].tolist()
            category = "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"
        elif type_choice == "2":
            products = df_products[df_products["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç"]["–ù–∞–∑–≤–∞–Ω–∏–µ"].tolist()
            category = "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç"
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
            for i, name in enumerate(products, 1):
                print(f"{i}. {name}")
            print("–º. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()

            if choice == "–º":
                break

            if not choice.isdigit() or not (1 <= int(choice) <= len(products)):
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                continue

            product_name = products[int(choice) - 1]
            break

        if choice == "–º":
            continue

        qty_input = input(f"–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ '{product_name}' –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: ").strip()
        if qty_input.lower() == "–º":
            continue
        if not qty_input.isdigit():
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
            continue
        qty = int(qty_input)

        recipe = df_recipes[df_recipes["–ù–∞–∑–≤–∞–Ω–∏–µ"] == product_name]

        if recipe.empty:
            # –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ ‚Äî –æ–±—ã—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞, —Å–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            if product_name in df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
                idx = df_products[df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"] == product_name].index[0]
                df_products.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"] += qty
            else:
                new_row = {
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": product_name,
                    "–ï–¥. –∏–∑–º.": "—à—Ç",
                    "–û—Å—Ç–∞—Ç–æ–∫": qty
                }
                df_products = pd.concat([df_products, pd.DataFrame([new_row])], ignore_index=True)

            use_materials_for_product(product_name, qty)
            save_products(df_products)
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ {qty} —à—Ç '{product_name}'. –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç–∞–¥–∏–π–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ (–æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ä–µ—Ü–µ–ø—Ç–∞)
        if len(recipe) == 1:
            source = recipe.iloc[0]["–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç"]
            used_qty = int(recipe.iloc[0]["–ö–æ–ª-–≤–æ"]) * qty

            if source not in df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
                print(f"\n‚ùóÔ∏è–ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{source}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            source_idx = df_products[df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"] == source].index[0]
            if df_products.at[source_idx, "–û—Å—Ç–∞—Ç–æ–∫"] < used_qty:
                print(f"\n‚ùóÔ∏è–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: '{source}' ‚Äî –Ω—É–∂–Ω–æ {used_qty}, –¥–æ—Å—Ç—É–ø–Ω–æ {df_products.at[source_idx, '–û—Å—Ç–∞—Ç–æ–∫']}")
                return

            # —Å–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç–∞–¥–∏—é
            df_products.at[source_idx, "–û—Å—Ç–∞—Ç–æ–∫"] -= used_qty
            print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {used_qty} —à—Ç –∏–∑ '{source}' –≤ '{product_name}'")
        else:
            # —Å–ª–æ–∂–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã
            df_used = []
            for _, row in recipe.iterrows():
                used_name = row["–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç"]
                used_qty = int(row["–ö–æ–ª-–≤–æ"]) * qty

                if used_name in df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
                    idx = df_products[df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"] == used_name].index[0]
                    if df_products.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"] < used_qty:
                        print(f"\n‚ùóÔ∏è–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: '{used_name}' ‚Äî –Ω—É–∂–Ω–æ {used_qty}, –¥–æ—Å—Ç—É–ø–Ω–æ {df_products.at[idx, '–û—Å—Ç–∞—Ç–æ–∫']}")
                        return
                    df_products.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"] -= used_qty
                    df_used.append((used_name, used_qty))
                else:
                    print(f"\n‚ùóÔ∏è–ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{used_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

        # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–∑–¥–µ–ª–∏—è
        if product_name in df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
            idx = df_products[df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"] == product_name].index[0]
            df_products.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"] += qty
        else:
            new_row = {
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": product_name,
                "–ï–¥. –∏–∑–º.": "—à—Ç",
                "–û—Å—Ç–∞—Ç–æ–∫": qty
            }
            df_products = pd.concat([df_products, pd.DataFrame([new_row])], ignore_index=True)

        save_products(df_products)
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ {qty} —à—Ç '{product_name}'. –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        return

def show_products_stock():
    df = load_products()
    while True:
        print("\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
        print("1. –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è")
        print("2. –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã")
        print("–º. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()

        if choice == "–º":
            return
        elif choice == "1":
            category = "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"
        elif choice == "2":
            category = "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç"
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            continue

        selected = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category]
        if selected.empty:
            print("\nüì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        else:
            print(f"\nüì¶ –û—Å—Ç–∞—Ç–∫–∏ ({category}):")
            for i, row in selected.iterrows():
                print(f"‚Äì {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}: {row['–û—Å—Ç–∞—Ç–æ–∫']} {row['–ï–¥. –∏–∑–º.']}")
        return

def add_product_stock(product_name: str, qty: int):
    df_products = load_products()

    if product_name in df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
        idx = df_products[df_products["–ù–∞–∑–≤–∞–Ω–∏–µ"] == product_name].index[0]
        df_products.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"] += qty
    else:
        new_row = {
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è",
            "–ù–∞–∑–≤–∞–Ω–∏–µ": product_name,
            "–ï–¥. –∏–∑–º.": "—à—Ç",
            "–û—Å—Ç–∞—Ç–æ–∫": qty
        }
        df_products = pd.concat([df_products, pd.DataFrame([new_row])], ignore_index=True)

    save_products(df_products)
