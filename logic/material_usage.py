import pandas as pd
import os

MATERIALS_FILE = "data/materials.xlsx"
PRODUCT_RECIPES_FILE = "data/product_recipes.xlsx"
SEMI_RECIPES_FILE = "data/semi_products_recipes.xlsx"


def load_materials():
    if not os.path.exists(MATERIALS_FILE):
        print("\n‚ùå –§–∞–π–ª materials.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return pd.DataFrame(columns=["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ï–¥. –∏–∑–º.", "–û—Å—Ç–∞—Ç–æ–∫"])
    return pd.read_excel(MATERIALS_FILE)


def save_materials(df):
    df.to_excel(MATERIALS_FILE, index=False)


def load_all_recipes():
    return pd.read_excel(PRODUCT_RECIPES_FILE), pd.read_excel(SEMI_RECIPES_FILE)


def get_flat_materials(product_name: str, qty: int, product_recipes: pd.DataFrame, semi_recipes: pd.DataFrame, visited=None):
    if visited is None:
        visited = set()

    if product_name in visited:
        return {}
    visited.add(product_name)

    result = {}
    recipe_rows = product_recipes[product_recipes["–ù–∞–∑–≤–∞–Ω–∏–µ"] == product_name]

    if recipe_rows.empty:
        semi_rows = semi_recipes[semi_recipes["–ù–∞–∑–≤–∞–Ω–∏–µ"] == product_name]
        if semi_rows.empty:
            result[product_name] = result.get(product_name, 0) + qty
            return result
        for _, row in semi_rows.iterrows():
            material = row["–ú–∞—Ç–µ—Ä–∏–∞–ª"]
            material_qty = row["–ö–æ–ª-–≤–æ"] * qty
            result[material] = result.get(material, 0) + material_qty
        return result

    for _, row in recipe_rows.iterrows():
        component = row["–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç"]
        component_qty = row["–ö–æ–ª-–≤–æ"] * qty
        sub_result = get_flat_materials(component, component_qty, product_recipes, semi_recipes, visited)
        for mat, q in sub_result.items():
            result[mat] = result.get(mat, 0) + q

    return result


def use_materials_for_product(product_name: str, qty: int):
    df_materials = load_materials()
    product_recipes, semi_recipes = load_all_recipes()

    total_materials = get_flat_materials(product_name, qty, product_recipes, semi_recipes)

    for material, total_needed in total_materials.items():
        if material not in df_materials["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
            print(f"\n‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª '{material}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ!")
            return

        idx = df_materials[df_materials["–ù–∞–∑–≤–∞–Ω–∏–µ"] == material].index[0]
        current_stock = df_materials.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"]

        if current_stock < total_needed:
            print(f"\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ '{material}': –Ω—É–∂–Ω–æ {total_needed}, –¥–æ—Å—Ç—É–ø–Ω–æ {current_stock}")
            return

    for material, total_needed in total_materials.items():
        idx = df_materials[df_materials["–ù–∞–∑–≤–∞–Ω–∏–µ"] == material].index[0]
        df_materials.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"] = round(df_materials.at[idx, "–û—Å—Ç–∞—Ç–æ–∫"] - total_needed, 4)
        print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {total_needed} {df_materials.at[idx, '–ï–¥. –∏–∑–º.']} '{material}'")

    save_materials(df_materials)
    print("\nüì¶ –û—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
