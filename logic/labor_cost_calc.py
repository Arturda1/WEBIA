from logic.material_cost_calc import trace_all_stages
import pandas as pd
from collections import defaultdict

PRODUCT_RECIPES_FILE = "data/product_recipes.xlsx"
OPERATION_RATES_FILE = "data/operation_rates.xlsx"


def calculate_labor_cost():
    try:
        product_df = pd.read_excel(PRODUCT_RECIPES_FILE)
        rates_df = pd.read_excel(OPERATION_RATES_FILE).drop_duplicates(subset=["–ù–∞–∑–≤–∞–Ω–∏–µ"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return

    products = sorted(product_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].unique().tolist())

    print("\nüì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ:")
    for i, name in enumerate(products, 1):
        print(f"{i}. {name}")
    try:
        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")) - 1
        if choice < 0 or choice >= len(products):
            raise ValueError
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    selected = products[choice]
    stages = trace_all_stages(selected, product_df)

    print(f"\nüßæ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –¥–ª—è: {selected}")
    print(f"{'–û–ø–µ—Ä–∞—Ü–∏—è':40} {'–ö–æ–ª-–≤–æ':>8} {'–°—Ç–∞–≤–∫–∞':>10} {'–°—É–º–º–∞':>10}")
    print("-" * 70)

    total = 0
    for stage, qty in stages.items():
        row = rates_df[rates_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == stage]
        if row.empty:
            continue
        rate = float(row.iloc[0]["–°—Ç–∞–≤–∫–∞ (‚ÇΩ)"])
        cost = round(rate * qty, 2)
        total += cost
        print(f"{stage:40} {qty:8.2f} {rate:10.2f} {cost:10.2f}")

    print("-" * 70)
    print(f"{'–ò–¢–û–ì–û:':>60} {total:10.2f} ‚ÇΩ")
